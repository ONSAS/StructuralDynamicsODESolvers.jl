var documenterSearchIndex = {"docs":
[{"location":"references.html#References","page":"References","title":"References","text":"","category":"section"},{"location":"references.html#[BATHE]","page":"References","title":"[BATHE]","text":"","category":"section"},{"location":"references.html","page":"References","title":"References","text":"Bathe, Klaus-Jürgen. Finite element procedures. Klaus-Jurgen Bathe, 2006.","category":"page"},{"location":"references.html","page":"References","title":"References","text":"@booklet{Bathe2014,\nannote = {0031},\nauthor = {Bathe, Klaus-Jurgen},\nedition = {2},\nisbn = {9780979004957},\npages = {1037},\npublisher = {Prentice-Hall},\ntitle = {{Finite Element Procedures}},\nurl = {http://web.mit.edu/kjb/www/Books/FEP{\\_}2nd{\\_}Edition{\\_}4th{\\_}Printing.pdf},\nyear = {2014}\n}","category":"page"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"DocTestSetup = :(using StructuralDynamicsODESolvers)\nCurrentModule = StructuralDynamicsODESolvers","category":"page"},{"location":"lib/direct.html#Direct-integration-methods","page":"Direct integration methods","title":"Direct integration methods","text":"","category":"section"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"This section describes direct integration methods for linear dynamic equations of the form","category":"page"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"    Mx(t) + Cx(t) + Kx(t) = f(t)","category":"page"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"The methods available are the standard central difference method, Houbolt's method, Newmark's method, and the Bathe integration method with equal-size substeps (gamma = 05). The theoretical description of these methods can be found in Chapter 9, [BATHE].","category":"page"},{"location":"lib/direct.html#Abstract-interface","page":"Direct integration methods","title":"Abstract interface","text":"","category":"section"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"StructuralDynamicsODESolvers.AbstractIntegrationAlgorithm","category":"page"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.AbstractIntegrationAlgorithm","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.AbstractIntegrationAlgorithm","text":"AbstractIntegrationAlgorithm\n\nAbstract supertype for all direct integration methods.\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#Algorithms","page":"Direct integration methods","title":"Algorithms","text":"","category":"section"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"Bathe\nCentralDifference\nHoubolt\nLinear\nNewmark\nTrapezoidal","category":"page"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.Bathe","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.Bathe","text":"Bathe{N} <: AbstractIntegrationAlgorithm\n\nBathe's integration scheme with given step-size and equal\n\nFields\n\nΔt – step-size\nα  – parameter α of the method\nδ  – parameter δ of the method\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.CentralDifference","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.CentralDifference","text":"CentralDifference{N} <: AbstractIntegrationAlgorithm\n\nCentral difference scheme with given step-size.\n\nFields\n\nΔt – step-size\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.Houbolt","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.Houbolt","text":"Houbolt{N} <: AbstractIntegrationAlgorithm\n\nHoubolt's integration scheme with given step-size.\n\nFields\n\nΔt – step-size\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.Linear","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.Linear","text":"Linear(Δt::N)\n\nLinear integration scheme. Special case of Newmark with δ=12 and α=16.\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.Newmark","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.Newmark","text":"Newmark{N} <: AbstractIntegrationAlgorithm\n\nHoubolt's integration scheme with given step-size and parameters α and δ.\n\nFields\n\nΔt – step-size\nα  – parameter α of the method\nδ  – parameter δ of the method\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.Trapezoidal","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.Trapezoidal","text":"Trapezoidal(Δt::N)\n\nTrapezoidal integration scheme. Special case of Newmark with δ=12 and α=14.\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#Solve-interface","page":"Direct integration methods","title":"Solve interface","text":"","category":"section"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"AbstractSolution\nIntegrationSolution\nstep_size\nsolve\ndisplacements\nvelocities\naccelerations","category":"page"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.AbstractSolution","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.AbstractSolution","text":"AbstractSolution\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.IntegrationSolution","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.IntegrationSolution","text":"IntegrationSolution{T<:AbstractIntegrationAlgorithm, UT, VT, AT} <: AbstractSolution\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.step_size","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.step_size","text":"step_size(alg::AbstractIntegrationAlgorithm)\n\nReturn the step size of the given algorithm.\n\nInput\n\nalg – direct integration algorithm\n\nOutput\n\nThe step size of the algorithm.\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.solve","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.solve","text":"solve(ivp::InitialValueProblem, alg, args..; kwargs...)\n\nSolve an initial-value problem.\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.displacements","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.displacements","text":"displacements(sol::IntegrationSolution)\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.velocities","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.velocities","text":"velocities(sol::IntegrationSolution)\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#StructuralDynamicsODESolvers.accelerations","page":"Direct integration methods","title":"StructuralDynamicsODESolvers.accelerations","text":"accelerations(sol::IntegrationSolution)\n\n\n\n\n\n","category":"function"},{"location":"lib/direct.html#Comparison","page":"Direct integration methods","title":"Comparison","text":"","category":"section"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"The examples in this file can be found in Chapter 9,  Finite Element Procedures, K-J Bathe [BATHE].","category":"page"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"using StructuralDynamicsODESolvers, Plots\n\n# ------------------------\n# Problem formulation\n# ------------------------\nM = [2 0; 0 1.]\nK = [6 -2; -2 4.]\nC = zeros(2, 2)\nf = [0.0, 10.0]\nexample_9_1_Bathe = SecondOrderAffineContinuousSystem(M, C, K, f)\n\nNSTEPS = 500\ntdom = range(0, NSTEPS * 0.1, length=NSTEPS + 1)\nU₀, U₀′ = zeros(2), zeros(2)\nprob = InitialValueProblem(example_9_1_Bathe, (U₀, U₀′))\n\n# ------------------------\n# Analytic solution\n# ------------------------\nA = [1/√3  (1/2)*√(2/3);\n     1/√3      -√(2/3)]\nx₁(t) = (5 / √3) * (1 - cos(t*√2))\nx₂(t) = (2 * √(2/3)) * (-1 + cos(t*√5))\nU(t) = A * [x₁(t), x₂(t)]\n\n# ------------------------\n# Central difference\n# ------------------------\nsol = solve(prob, CentralDifference(Δt=0.1), NSTEPS) |> displacements\nind = 150:170\nfig = plot(xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nfig2 = plot(xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Central difference\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Central difference\")\n\n# ------------------------\n# Houbolt\n# ------------------------\nsol = solve(prob, Houbolt(Δt=0.1), NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Houbolt\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Houbolt\")\n\n# ------------------------\n# Newmark\n# ------------------------\nsol = solve(prob, Trapezoidal(Δt=0.1), NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Newmark\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Newmark\")\n\n# ------------------------\n# Bathe\n# ------------------------\nsol = solve(prob, Bathe(Δt=0.1), NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Bathe\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Bathe\")\n\n# ------------------------\n# Analytic solution\n# ------------------------\ntdom = range(0, NSTEPS*0.1, length=1000)\nplot!(fig, tdom, [U(t)[1] for t in tdom], lab=\"Analytic\")\nplot!(fig2, tdom[299:330], [U(t)[1] for t in tdom[299:330]], lab=\"Analytic\")\n\nfig","category":"page"},{"location":"lib/direct.html","page":"Direct integration methods","title":"Direct integration methods","text":"fig2","category":"page"},{"location":"about.html#About","page":"About","title":"About","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"This page contains some general information about this project, and recommendations about contributing.","category":"page"},{"location":"about.html#Contributing","page":"About","title":"Contributing","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"If you like this package, consider contributing! We welcome bug reports, examples that can be added to the documentation, or new feature proposals.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"Below we list some conventions that we follow when contributing to this package. For specific guidelines on documentation see the JuliaReach Developer's Documentation.","category":"page"},{"location":"about.html#Branches","page":"About","title":"Branches","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"Each pull request (PR) should be pushed in a new branch with the name of the author followed by a descriptive name, e.g. mforets/my_feature. If the branch is associated to a previous discussion in an issue, we use the name of the issue for easier lookup, e.g. mforets/7.","category":"page"},{"location":"about.html#Unit-testing-and-continuous-integration-(CI)","page":"About","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"This project is synchronized with Travis CI, such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to understand and fix the failing tests if they exist. We support Julia v1.0 and develop in the latest stable release. For experimentation we also build on the nightly branch.","category":"page"},{"location":"about.html","page":"About","title":"About","text":"To run the unit tests locally, you should do:","category":"page"},{"location":"about.html","page":"About","title":"About","text":"$ julia --color=yes test/runtests.jl","category":"page"},{"location":"about.html#Contributing-to-the-documentation","page":"About","title":"Contributing to the documentation","text":"","category":"section"},{"location":"about.html","page":"About","title":"About","text":"This documentation is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. To build the documentation, run make.jl:","category":"page"},{"location":"about.html","page":"About","title":"About","text":"$ julia --color=yes docs/make.jl","category":"page"}]
}
