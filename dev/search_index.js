var documenterSearchIndex = {"docs":
[{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"EditURL = \"../../../examples/massDashpotSpring.jl\"","category":"page"},{"location":"models/massDashpotSpring/#Mass-dashpot-spring","page":"Spring-mass","title":"Mass dashpot spring","text":"","category":"section"},{"location":"models/massDashpotSpring/#Free-oscillations","page":"Spring-mass","title":"Free oscillations","text":"","category":"section"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"using StructuralDynamicsODESolvers, Plots, LinearAlgebra\n\nk = 2;\nm = 0.5;\nc = 0;\nu0 = 1;\nv0 = 0;\n\nM = m * ones(1, 1)\nC = c * ones(1, 1)\nK = k * ones(1, 1)\nR = zeros(1)\n\nsys = SecondOrderAffineContinuousSystem(M, C, K, R)\n\nU₀ = u0 * ones(1);\nV₀ = v0 * ones(1);\n\nivp_free = InitialValueProblem(sys, (U₀, V₀))\n\nNSTEPS = 1000;\nΔt = 0.005;\nnothing #hide","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"alg = Bathe(; Δt=Δt)\nsol = solve(ivp_free, alg; NSTEPS=NSTEPS);\nnothing #hide","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"The following command is the same as plot(times(sol), displacements(sol, 1)).","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"plot(sol; vars=(0, 1))","category":"page"},{"location":"models/massDashpotSpring/#Forced-oscillations","page":"Spring-mass","title":"Forced oscillations","text":"","category":"section"},{"location":"models/massDashpotSpring/#Problem-definition","page":"Spring-mass","title":"Problem definition","text":"","category":"section"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"Let us consider now a forcing term f(t) = A_f sin(ω_f cdot t)","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"ωN = sqrt(k / m)\nωf = ωN * 2\nAf = 10.0\nR = [[Af * sin(ωf * Δt * (i - 1))] for i in 1:(NSTEPS + 1)];\nnothing #hide","category":"page"},{"location":"models/massDashpotSpring/#Second-order-problem-resolution","page":"Spring-mass","title":"Second order problem resolution","text":"","category":"section"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"X = nothing # state constraints are ignored\nB = ones(1, 1)\nsys = SecondOrderConstrainedLinearControlContinuousSystem(M, C, K, B, X, R)\n\nivp_forced_secOrder = InitialValueProblem(sys, (U₀, V₀))\n\nalg = Bathe(; Δt=Δt)\nsol_secOrder = solve(ivp_forced_secOrder, alg; NSTEPS=NSTEPS);\nnothing #hide","category":"page"},{"location":"models/massDashpotSpring/#First-order-homogeneization-formulation","page":"Spring-mass","title":"First order homogeneization formulation","text":"","category":"section"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"The problem can be re-formulated as a first order and homogeneous one given by","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"left\nbeginarrayl\ndotu = v \ndotv = -omega_N^2 u + u_fm \ndotu_f = v_f \ndotv_f = -omega_f^2 u_f\nendarray\nright","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"The new vector of variables is","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"textbfx =  u v u_f v_f ^T","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"K = [0 1 0 0\n     -ωN^2 0 1/m 0\n     0 0 0 1\n     0 0 -ωf^2 0];\n\nC = -Diagonal(ones(4))\nM = zeros(4, 4)\nR = zeros(4)\n\nsys = SecondOrderAffineContinuousSystem(M, C, K, R)\n\nU₀ = [u0; v0; 0; ωf * Af];\n\nivp_forced_firOrder = InitialValueProblem(sys, (U₀, U₀))\n\nalg = BackwardEuler(; Δt=Δt)\nsol_firOrderA = solve(ivp_forced_firOrder, alg; NSTEPS=NSTEPS);\n\nNSTEPS = NSTEPS * 3;\nalg = BackwardEuler(; Δt=Δt / 3.0);\nsol_firOrderB = solve(ivp_forced_firOrder, alg; NSTEPS=NSTEPS);\nnothing #hide","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"The solution obtained is","category":"page"},{"location":"models/massDashpotSpring/","page":"Spring-mass","title":"Spring-mass","text":"plot(sol_secOrder; vars=(0, 1), xlab=\"time\")\nplot!(sol_firOrderA; vars=(0, 1))\nplot!(sol_firOrderB; vars=(0, 1))","category":"page"},{"location":"references/#refs_page","page":"References","title":"References","text":"","category":"section"},{"location":"references/#[BATHE]","page":"References","title":"[BATHE]","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Bathe, Klaus-Jürgen. Finite element procedures. Klaus-Jurgen Bathe, 2006.","category":"page"},{"location":"references/","page":"References","title":"References","text":"@booklet{Bathe2014,\nannote = {0031},\nauthor = {Bathe, Klaus-Jurgen},\nedition = {2},\nisbn = {9780979004957},\npages = {1037},\npublisher = {Prentice-Hall},\ntitle = {{Finite Element Procedures}},\nurl = {http://web.mit.edu/kjb/www/Books/FEP{\\_}2nd{\\_}Edition{\\_}4th{\\_}Printing.pdf},\nyear = {2014}\n}","category":"page"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"references/#[BAT07]","page":"References","title":"[BAT07]","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Bathe, Klaus-Jürgen. Conserving energy and momentum in nonlinear dynamics: a simple implicit time integration scheme. Computers & structures 85.7-8 (2007): 437-445.","category":"page"},{"location":"references/#[HOU50]","page":"References","title":"[HOU50]","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Houbolt, John C. A recurrence matrix solution for the dynamic response of elastic aircraft. Journal of the Aeronautical Sciences 17.9 (1950): 540-550.","category":"page"},{"location":"references/#[NEW59]","page":"References","title":"[NEW59]","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Newmark, Nathan M. A method of computation for structural dynamics. Journal of the engineering mechanics division 85.3 (1959): 67-94.","category":"page"},{"location":"lib/examples/","page":"Example","title":"Example","text":"DocTestSetup = :(using StructuralDynamicsODESolvers)\nCurrentModule = StructuralDynamicsODESolvers","category":"page"},{"location":"lib/examples/#sec_example","page":"Example","title":"Example","text":"","category":"section"},{"location":"lib/examples/","page":"Example","title":"Example","text":"The example considered next can be found in Chapter 9 of [BATHE].","category":"page"},{"location":"lib/examples/","page":"Example","title":"Example","text":"using StructuralDynamicsODESolvers, Plots\n\n# ------------------------\n# Problem formulation\n# ------------------------\nM = [2 0; 0 1.]\nK = [6 -2; -2 4.]\nC = zeros(2, 2)\nf = [0.0, 10.0]\nexample_9_1_Bathe = SecondOrderAffineContinuousSystem(M, C, K, f)\n\nNSTEPS = 500\ntdom = range(0, NSTEPS * 0.1, length=NSTEPS + 1)\nU₀, U₀′ = zeros(2), zeros(2)\nprob = InitialValueProblem(example_9_1_Bathe, (U₀, U₀′))\n\n# ------------------------\n# Analytic solution\n# ------------------------\nA = [1/√3  (1/2)*√(2/3);\n     1/√3      -√(2/3)]\nx₁(t) = (5 / √3) * (1 - cos(t*√2))\nx₂(t) = (2 * √(2/3)) * (-1 + cos(t*√5))\nU(t) = A * [x₁(t), x₂(t)]\n\n# ------------------------\n# Central difference\n# ------------------------\nsol = solve(prob, CentralDifference(Δt=0.1); NSTEPS=NSTEPS) |> displacements\nind = 150:170\nfig = plot(xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nfig2 = plot(xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Central difference\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Central difference\")\n\n# ------------------------\n# Houbolt\n# ------------------------\nsol = solve(prob, Houbolt(Δt=0.1); NSTEPS=NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Houbolt\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Houbolt\")\n\n# ------------------------\n# Newmark\n# ------------------------\nsol = solve(prob, Trapezoidal(Δt=0.1); NSTEPS=NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Newmark\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Newmark\")\n\n# ------------------------\n# Bathe\n# ------------------------\nsol = solve(prob, Bathe(Δt=0.1); NSTEPS=NSTEPS) |> displacements\nplot!(fig, tdom, [s[1] for s in sol], lab=\"Bathe\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]], lab=\"Bathe\")\n\n# ------------------------\n# Analytic solution\n# ------------------------\ntdom = range(0, NSTEPS*0.1, length=1000)\nplot!(fig, tdom, [U(t)[1] for t in tdom], lab=\"Analytic\")\nplot!(fig2, tdom[299:330], [U(t)[1] for t in tdom[299:330]], lab=\"Analytic\")\n\nfig","category":"page"},{"location":"lib/examples/","page":"Example","title":"Example","text":"fig2","category":"page"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"DocTestSetup = :(using StructuralDynamicsODESolvers)\nCurrentModule = StructuralDynamicsODESolvers","category":"page"},{"location":"lib/first_order/#First-order-problems","page":"First-order problems","title":"First-order problems","text":"","category":"section"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"This section includes direct integration methods for linear dynamic equations of the form:","category":"page"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"    Mx(t) + Kx(t) = F(t)","category":"page"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"In the context of heat transfer problems,  M is the capacity matrix, K is the conductivity matrix, F(t) is the heat supply vector, x(t) is the temperature vector, and x(t) is the time derivative of x(t).","category":"page"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"The following algorithms are available:","category":"page"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"Backward (implicit) Euler","category":"page"},{"location":"lib/first_order/#Backward-Euler","page":"First-order problems","title":"Backward Euler","text":"","category":"section"},{"location":"lib/first_order/","page":"First-order problems","title":"First-order problems","text":"BackwardEuler","category":"page"},{"location":"lib/first_order/#StructuralDynamicsODESolvers.BackwardEuler","page":"First-order problems","title":"StructuralDynamicsODESolvers.BackwardEuler","text":"struct BackwardEuler{N} <: StructuralDynamicsODESolvers.AbstractSolver\n\nBackward Euler's integration scheme with given step-size.\n\nFields\n\nΔt – step-size\n\n\n\n\n\n","category":"type"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"EditURL = \"../../../examples/example_9_1_Bathe.jl\"","category":"page"},{"location":"models/example_9_1_Bathe/#Example-(Ch.-9-Bathe)","page":"Example (Ch.9 Bathe)","title":"Example (Ch. 9 Bathe)","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"The example considered next can be found in Chapter 9 of [BATHE].","category":"page"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"using StructuralDynamicsODESolvers, Plots","category":"page"},{"location":"models/example_9_1_Bathe/#Problem-formulation","page":"Example (Ch.9 Bathe)","title":"Problem formulation","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"M = [2 0; 0 1.0]\nK = [6 -2; -2 4.0]\nC = zeros(2, 2)\nf = [0.0, 10.0]\nexample_9_1_Bathe = SecondOrderAffineContinuousSystem(M, C, K, f)\n\nNSTEPS = 500\ntdom = range(0, NSTEPS * 0.1; length=NSTEPS + 1)\nU₀, U₀′ = zeros(2), zeros(2)\nprob = InitialValueProblem(example_9_1_Bathe, (U₀, U₀′))","category":"page"},{"location":"models/example_9_1_Bathe/#Analytic-solution","page":"Example (Ch.9 Bathe)","title":"Analytic solution","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"A = [1/√3 (1 / 2)*√(2 / 3)\n     1/√3 -√(2 / 3)]\nx₁(t) = (5 / √3) * (1 - cos(t * √2))\nx₂(t) = (2 * √(2 / 3)) * (-1 + cos(t * √5))\nU(t) = A * [x₁(t), x₂(t)]","category":"page"},{"location":"models/example_9_1_Bathe/#Central-difference","page":"Example (Ch.9 Bathe)","title":"Central difference","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"sol = displacements(solve(prob, CentralDifference(; Δt=0.1); NSTEPS=NSTEPS))\nind = 150:170\nfig = plot(; xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nfig2 = plot(; xlab=\"time\", ylab=\"x1(t)\", legend=:outertopright)\nplot!(fig, tdom, [s[1] for s in sol]; lab=\"Central difference\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]]; lab=\"Central difference\")","category":"page"},{"location":"models/example_9_1_Bathe/#Houbolt","page":"Example (Ch.9 Bathe)","title":"Houbolt","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"sol = displacements(solve(prob, Houbolt(; Δt=0.1); NSTEPS=NSTEPS))\nplot!(fig, tdom, [s[1] for s in sol]; lab=\"Houbolt\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]]; lab=\"Houbolt\")","category":"page"},{"location":"models/example_9_1_Bathe/#Newmark","page":"Example (Ch.9 Bathe)","title":"Newmark","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"sol = displacements(solve(prob, Trapezoidal(; Δt=0.1); NSTEPS=NSTEPS))\nplot!(fig, tdom, [s[1] for s in sol]; lab=\"Newmark\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]]; lab=\"Newmark\")","category":"page"},{"location":"models/example_9_1_Bathe/#Bathe","page":"Example (Ch.9 Bathe)","title":"Bathe","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"sol = displacements(solve(prob, Bathe(; Δt=0.1); NSTEPS=NSTEPS))\nplot!(fig, tdom, [s[1] for s in sol]; lab=\"Bathe\")\nplot!(fig2, tdom[ind], [s[1] for s in sol[ind]]; lab=\"Bathe\")","category":"page"},{"location":"models/example_9_1_Bathe/#Analytic-solution-2","page":"Example (Ch.9 Bathe)","title":"Analytic solution","text":"","category":"section"},{"location":"models/example_9_1_Bathe/","page":"Example (Ch.9 Bathe)","title":"Example (Ch.9 Bathe)","text":"tdom = range(0, NSTEPS * 0.1; length=1000)\nplot!(fig, tdom, [U(t)[1] for t in tdom]; lab=\"Analytic\")\nplot!(fig2, tdom[299:330], [U(t)[1] for t in tdom[299:330]]; lab=\"Analytic\")","category":"page"},{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This page contains some general information about this project, and recommendations about contributing.","category":"page"},{"location":"about/#Contributing","page":"About","title":"Contributing","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"If you like this package, consider contributing! We welcome bug reports, examples that can be added to the documentation, or new feature proposals.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Below we list some conventions that we follow when contributing to this package. For specific guidelines on documentation see the JuliaReach Developer's Documentation.","category":"page"},{"location":"about/#Branches","page":"About","title":"Branches","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Each pull request (PR) should be pushed in a new branch with the name of the author followed by a descriptive name, e.g. mforets/my_feature. If the branch is associated to a previous discussion in an issue, we use the name of the issue for easier lookup, e.g. mforets/7.","category":"page"},{"location":"about/#Unit-testing-and-continuous-integration-(CI)","page":"About","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This project is synchronized with Travis CI, such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to understand and fix the failing tests if they exist. We support Julia v1.0 and develop in the latest stable release. For experimentation we also build on the nightly branch.","category":"page"},{"location":"about/","page":"About","title":"About","text":"To run the unit tests locally, you should do:","category":"page"},{"location":"about/","page":"About","title":"About","text":"$ julia --color=yes test/runtests.jl","category":"page"},{"location":"about/#Contributing-to-the-documentation","page":"About","title":"Contributing to the documentation","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This documentation is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. To build the documentation, run make.jl:","category":"page"},{"location":"about/","page":"About","title":"About","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"DocTestSetup = :(using StructuralDynamicsODESolvers)\nCurrentModule = StructuralDynamicsODESolvers","category":"page"},{"location":"lib/second_order/#Second-order-problems","page":"Second-order problems","title":"Second-order problems","text":"","category":"section"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"This section includes direct integration methods for linear dynamic equations of the form","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"    Mx(t) + Cx(t) + Kx(t) = F(t)","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"In the context of structural dynamics problems, M is the mass matrix, C is the viscous damping matrix, K is the stiffness matrix, F is the vector of applied forces, and x(t), x(t) and x(t) are the displacement, velocity and acceleration vectors, respectively.","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"The following algorithms are available:","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"Central difference method.\nHoubolt's method.\nNewmark's method.\nBathe integration method with equal-size substeps (gamma = 05).","category":"page"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"The theoretical description of such methods can be found in Chapter 9, [BATHE]; see also the references appearing in each docstring.","category":"page"},{"location":"lib/second_order/#Central-difference","page":"Second-order problems","title":"Central difference","text":"","category":"section"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"CentralDifference","category":"page"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.CentralDifference","page":"Second-order problems","title":"StructuralDynamicsODESolvers.CentralDifference","text":"struct CentralDifference{N} <: StructuralDynamicsODESolvers.AbstractSolver\n\nCentral difference scheme with given step-size.\n\nFields\n\nΔt – step-size\n\n\n\n\n\n","category":"type"},{"location":"lib/second_order/#Houbolt","page":"Second-order problems","title":"Houbolt","text":"","category":"section"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"Houbolt","category":"page"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.Houbolt","page":"Second-order problems","title":"StructuralDynamicsODESolvers.Houbolt","text":"struct Houbolt{N} <: StructuralDynamicsODESolvers.AbstractSolver\n\nHoubolt's integration scheme with given step-size.\n\nFields\n\nΔt – step-size\n\nReferences\n\nSee [HOU50].\n\n\n\n\n\n","category":"type"},{"location":"lib/second_order/#Newmark","page":"Second-order problems","title":"Newmark","text":"","category":"section"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"Linear\nNewmark\nTrapezoidal","category":"page"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.Linear","page":"Second-order problems","title":"StructuralDynamicsODESolvers.Linear","text":"Linear(Δt::N)\n\nLinear integration scheme. Special case of Newmark with δ=12 and α=16.\n\n\n\n\n\n","category":"function"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.Newmark","page":"Second-order problems","title":"StructuralDynamicsODESolvers.Newmark","text":"struct Newmark{N} <: StructuralDynamicsODESolvers.AbstractSolver\n\nNewmark's integration scheme with given step-size and parameters α and δ.\n\nFields\n\nΔt – step-size\nα  – parameter α of the method\nδ  – parameter δ of the method\n\nReferences\n\nSee [NEW59].\n\n\n\n\n\n","category":"type"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.Trapezoidal","page":"Second-order problems","title":"StructuralDynamicsODESolvers.Trapezoidal","text":"Trapezoidal(Δt::N)\n\nTrapezoidal integration scheme. Special case of Newmark with δ=12 and α=14.\n\n\n\n\n\n","category":"function"},{"location":"lib/second_order/#Bathe","page":"Second-order problems","title":"Bathe","text":"","category":"section"},{"location":"lib/second_order/","page":"Second-order problems","title":"Second-order problems","text":"Bathe","category":"page"},{"location":"lib/second_order/#StructuralDynamicsODESolvers.Bathe","page":"Second-order problems","title":"StructuralDynamicsODESolvers.Bathe","text":"struct Bathe{N} <: StructuralDynamicsODESolvers.AbstractSolver\n\nBathe's integration scheme with sub-steps of equal size.\n\nFields\n\nΔt – step-size\nα  – parameter α of the method\nδ  – parameter δ of the method\n\nReferences\n\nSee [BAT07].\n\n\n\n\n\n","category":"type"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"DocTestSetup = :(using StructuralDynamicsODESolvers)\nCurrentModule = StructuralDynamicsODESolvers","category":"page"},{"location":"lib/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"lib/api/#Solve-interface","page":"API Reference","title":"Solve interface","text":"","category":"section"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"Solution\nstep_size\nsolve\ndisplacements\nvelocities\naccelerations","category":"page"},{"location":"lib/api/#StructuralDynamicsODESolvers.Solution","page":"API Reference","title":"StructuralDynamicsODESolvers.Solution","text":"Solution{T<:AbstractSolver, UT, VT, AT} <: AbstractSolution\n\nFields\n\nalg – algorithm used in the integration\nU   – displacements\nU′  – velocities\nU′′ – accelerations\nt   – vector of time values\n\n\n\n\n\n","category":"type"},{"location":"lib/api/#StructuralDynamicsODESolvers.step_size","page":"API Reference","title":"StructuralDynamicsODESolvers.step_size","text":"step_size(alg::AbstractSolver)\n\nReturn the step size of the given algorithm.\n\nInput\n\nalg – algorithm\n\nOutput\n\nThe step size of the algorithm, or nothing if the step-size is not fixed.\n\n\n\n\n\n","category":"function"},{"location":"lib/api/#CommonSolve.solve","page":"API Reference","title":"CommonSolve.solve","text":"CommonSolve.solve(args...; kwargs...)\n\nSolves an equation or other mathematical problem using the algorithm specified in the arguments. Generally, the interface is:\n\nCommonSolve.solve(prob::ProblemType,alg::SolverType; kwargs...)::SolutionType\n\nwhere the keyword arguments are uniform across all choices of algorithms.\n\nBy default, solve defaults to using solve! on the iterator form, i.e.:\n\nsolve(args...; kwargs...) = solve!(init(args...; kwargs...))\n\n\n\n\n\nsolve(ivp::InitialValueProblem, alg::AbstractSolver, args..; kwargs...)\n\nSolve an initial-value problem.\n\nInput\n\nivp – initial-value problem\nalg – algorithm\n\nOutput\n\nA solution structure (Solution) that holds the result and the algorithm used to obtain it.\n\n\n\n\n\n","category":"function"},{"location":"lib/api/#StructuralDynamicsODESolvers.displacements","page":"API Reference","title":"StructuralDynamicsODESolvers.displacements","text":"displacements(sol::Solution)\n\nReturn the vector of displacements of the given solution.\n\n\n\n\n\ndisplacements(sol::Solution, i::Int)\n\nReturn the vector of displacements of the given solution along coordinate i.\n\n\n\n\n\n","category":"function"},{"location":"lib/api/#StructuralDynamicsODESolvers.velocities","page":"API Reference","title":"StructuralDynamicsODESolvers.velocities","text":"velocities(sol::Solution)\n\nReturn the vector of velocities of the given solution.\n\n\n\n\n\nvelocities(sol::Solution, i::Int)\n\nReturn the vector of velocities of the given solution along coordinate i.\n\n\n\n\n\n","category":"function"},{"location":"lib/api/#StructuralDynamicsODESolvers.accelerations","page":"API Reference","title":"StructuralDynamicsODESolvers.accelerations","text":"accelerations(sol::Solution)\n\nReturn the vector of accelerations of the given solution.\n\n\n\n\n\naccelerations(sol::Solution, i::Int)\n\nReturn the vector of accelerations of the given solution along coordinate i.\n\n\n\n\n\n","category":"function"},{"location":"lib/api/#Type-hierarchy-and-dispatch","page":"API Reference","title":"Type hierarchy & dispatch","text":"","category":"section"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"Each integration algorithm, called solver, is implemented by a Julia struct which holds the algorithm's options (such as the step-size), and such struct is a subtype of AbstractSolver. New solvers should implement a method with signature","category":"page"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"_solve(::SolverType, ::InitialValueProblem{...}, args...; kwargs...)`","category":"page"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"The return type of a solver must be any concrete subtype that implements the AbstractSolution interface, e.g. the Solution type.","category":"page"},{"location":"lib/api/","page":"API Reference","title":"API Reference","text":"StructuralDynamicsODESolvers.AbstractSolution\nStructuralDynamicsODESolvers.AbstractSolver","category":"page"},{"location":"lib/api/#StructuralDynamicsODESolvers.AbstractSolution","page":"API Reference","title":"StructuralDynamicsODESolvers.AbstractSolution","text":"AbstractSolution\n\nAbstract supertype that holds the solution of a numerical integration.\n\n\n\n\n\n","category":"type"},{"location":"lib/api/#StructuralDynamicsODESolvers.AbstractSolver","page":"API Reference","title":"StructuralDynamicsODESolvers.AbstractSolver","text":"AbstractSolver\n\nAbstract supertype for all direct integration methods.\n\n\n\n\n\n","category":"type"},{"location":"models/dynamic_von_mises_truss/","page":"Dynamic Von Mises","title":"Dynamic Von Mises","text":"EditURL = \"../../../examples/dynamic_von_mises_truss.jl\"","category":"page"},{"location":"models/dynamic_von_mises_truss/#Dynamic-Von-Mises-Truss","page":"Dynamic Von Mises","title":"Dynamic Von Mises Truss","text":"","category":"section"},{"location":"models/dynamic_von_mises_truss/","page":"Dynamic Von Mises","title":"Dynamic Von Mises","text":"(Image: )","category":"page"},{"location":"models/dynamic_von_mises_truss/","page":"Dynamic Von Mises","title":"Dynamic Von Mises","text":"using StructuralDynamicsODESolvers, Plots","category":"page"},{"location":"#StructuralDynamicsODESolvers.jl","page":"Home","title":"StructuralDynamicsODESolvers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Documentation) (Image: license) (Image: Join the chat at https://gitter.im/ONSAS_/community)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package contains pure Julia implementations of ordinary differential equations (ODE) solvers for structural dynamics problems.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following algorithms for linear dynamic equations are implemented:","category":"page"},{"location":"","page":"Home","title":"Home","text":"For second order  problems:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bathe (equal size sub-steps) [BAT07]\nCentral difference\nHoubolt [HOU50]\nNewmark [NEW59]","category":"page"},{"location":"","page":"Home","title":"Home","text":"For first order problems:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Backward Euler","category":"page"},{"location":"#Related-libraries","page":"Home","title":"Related libraries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package has been created for research purposes. If you are new to numerically solving differential equations in Julia, we strongly suggest that you use the DifferentialEquations.jl suite.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the References section.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/first_order.md\",\n    \"lib/second_order.md\",\n    \"lib/example.md\",\n    \"lib/api.md\"\n]\nDepth = 2","category":"page"}]
}
